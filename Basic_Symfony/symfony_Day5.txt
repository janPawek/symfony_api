Symfony Day 5: also a LiveCoding-Code from Serri


go to templates  create Folder "components" - create Folder "navbar" - create file " navbar.html.twig"

put inside:
{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('styles/nav.css') }}">
{% block javascripts %}
    <script src="{{ asset('JS/navbar.js') }}"></script>{% endblock %}
{% endblock %}
{% block body %}

here we put the code bootstrap or our HTML-code with our own css-classes and js inside

{% endblock %}

next step:
integrate navbar at the file base.html.twig:
    {% block body %}
          {% include "<components/navbar.html.twig %}
    
    {% endblock %}


to build a CRUD:
terminal:
symfony console make:crud

terminal: "The class name of the entity to create CRUD (e.g. GentlePuppy):"
Product

terminal: "Choose a name for your controller class (e.g. ProductController) [ProductController]:"
ProductController

terminal: " Do you want to generate test for the controller? [Experimental] (yes/no) [no]:"
no

CRUD is done: 

Terminal: Check your new CRUD by going to /product/
- means: at folder "templates" is a folder created by symfony named 
"prduct" within the files:
_delete.html.twig
_form.html.twig
edit.html.twig
index.html.twig
new.html.twig
show.html.twig

How to run a project in browser:
Terminal: 
symfony serve
or
symfony server:start

browser: our project
click "create new"

create nice form for create:
Browser: form theme in symfony
symfony.com/doc/current/form/form_themes.html

copy: "
form_themes:['bootstrap_5_horizontal_layout.html.twig']
"

VSC: 
"Strg" + "p"
put in: 
"twig.yaml"
file is at folder "config" folder "packages"
put in the copied line.
IMPORTANT: copy space, otherwise the code will not work at symfony

total code at: twig.yaml:
twig:
    file_name_pattern: '*.twig'
    form_themes: ['bootstrap_5_horizontal_layout.html.twig']

when@test:
    twig:
        strict_variables: true

Login:
IMPORTANT: don´t create an entity for it, use "make:user", with make:user symfony creates security, with entity not
Terminal: put 
symfony console make:user

Terminal: The name of the security user class (e.g. User) [User]:
User

Terminal: Do you want to store user data in the  database (via Doctrine)? (yes/no) [yes]:
yes

Terminal: Enter a property name that will be the unique  "display" name for the user (e.g. email, username, uuid) [email]:
email

Terminal: Does this app need to hash/check user passwords? (yes/no [yes]):
yes

Login done at terminal

VSC: folder "src" Folder "Entity" file "User.php"

to add columns at Login:
Terminal: symfony console make:entity

Terminal: Class name of the entity to create or update (e.g. TinyChef):
User

Terminal: New property name (press <return> to stop adding files):
first_name
Terminal: Field type (enter ? to see all types) [string]:
string
Terminal: Field length [255]:
150
Terminal: Can this field be null in the database (nullable) (yes/no) [no]:
no

Terminal: Add another property? Enter the property name (or press <return> to stop adding fields):
last_name
string
150
no

Terminal: Add another property? Enter the property name (or press <return> to stop adding fields):

Create a table for login:
Terminal:
symfony console doctrine:schema:update --force

done - OK Database schema updated successfully!

MySql/ phpMyAdmin you see the columns of login

to do Login-Form:
Terminal:  symfony console make:auth

Terminal: 
What style of authentication do you want? [Empty authenticator]:
[0] Empty authenticator
[1] Login form authenticator

We choose 1, 0 is for API

Terminal: The class name of authenticator to create (e.g. AppCustomAuthenticator):
We choose, but name is up to you :
LoginFormAuthenticator

Terminal: Choose a name for the controller class (e.g. SecurityController) [SecurityController]:
SecurityController

Terminal: Do you want to generate '/logout' URL? (yes/no) [yes]:
yes

Terminal: Do you want to support remember me? (yes/no) [yes]:
We choose no: because otherwise we have to code javascript
We will get documentation to do this on Tuesday, April, 16th 2024

done

VSC: templates/security/login.html.twig

Add Login to the navbar: Login navbar:
go to VSC: templates/components/navbar.html.twig

1. step:
create controller for "home":
to Terminal: symfony console make:controller

Terminal: Choose name .....
Static

Static: is the view (show) at the browser for user, which is not login

Terminal: success

go VSC: src/Controller/StyticController.php
Change Route to
#[Route'/', name: 'app_static']

IMPORTANT: create a Controller for each table and Static (HomeStatic), because for users, who are not login 

2. Step:
go VSC: navbar.html.twig to the line of "Home" link change the path of the StaticController there
(<a ... href="{{  path('app_static') }}>Home</a>)

3. step: Login-link at navbar:
<a class="nav-link" href="{{  path('app_login') }}">Login</a>

we got the path (name) from the SecurityController

go VSC: src/Security/LoginFormAuthenticator.
comment the line: "
throw new \Exception('TODO: provide a valid redirect inside '._FILE_);

and uncomment the line, now this line will active:
return new RedirectResponse($this->urlGnerator->generate('app_product_index'));

copy the comment one:
throw new \Exception('TODO: provide a valid redirect inside '._FILE_);

add register:
Terminal: symfony console make:registration-form

Terminal: Do you want to add a #[UniqueEntity] validation attribute to your User class to make sure duplicate accounts aren´t created? (yes/no) [yes]:
yes

Terminal: Do you want to send an email to verify the user´semail address after registration? (yes/no) [no]:

We take no, because (yes) has to be deployed

Do you want to automatically authenticate the user after registration? (yes/no) [yes]:

We take no. BUT we can take YES. Means: the user will automatically login ed after registration. With No the user has to Login after registration

Terminal: "
What route should the user redirected to after registration?
[0 ] _preview_error
[1 ] _wdt
[2 ] _profiler_home
[3 ] _profiler_search
...
[19 ] app_login
"
we put "19" at the terminal

done.
Terminal: browser: /register

Add register to the navbar: templates/components/navbar.html.twig
create a new link (element at the navbar):

<li class="nav-item">
<a class="nav-link" href="{{  path('app_register') }}">Register</a>
</li>

We get the path from RegistrationController.php

Add the new (first_name, last_name) fields at register to show them in browser for the user:

go VSC: src/Form/RegistrationFormType.

at $builder
add
->add('first_name')
->add('last_name')

go VSC: templates/registration/register.html.twig

add there after email:
{{  form_row(registrationForm.first_name) }}
{{  form_row(registrationForm.last_name) }}


modify the user view at browser: the user isn`t allowed to see the CRUD Pages and possibilities:
"Strg" + "p"
search for: Security.yaml
there is one in the route 
and one in the packages

we open: config/packages/security.yaml

go to the line:
access_control:
    - { path: ^/admin, roles: ROLE_ADMIN }
    - { path: ^/profile, roles: ROLE_USER }

uncomment this 2 lines

nest step:
go VSC: src/controller/ProductController.php
copy: product
there
go back to  Security.yaml


before we have to create a controller for User:
Terminal: symfony console make:controller

Terminal: Choose a name for your class (e.g. AgreeableKangarooController):
UserAccess

success


IMPORTANT copy code from Day5 from  UserAccessController.php and ProductController.php at minute 46.30 at LiveCoding symfony Day 5 - done:
whole finished code of  UserAccessController.php:
<?php

namespace App\Controller;

use App\Repository\ProductRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;

#[Route('/user')]
class UserAccessController extends AbstractController
{
    #[Route('/', name: 'app_user_access')]
    public function index(ProductRepository $productRepository): Response
    {
        return $this->render('user_access/index.html.twig', [
            'products' => $productRepository->findAll(),
        ]);
    }
}

whole finished code of  ProductController.php:
<?php

namespace App\Controller;

use App\Entity\Product;
use App\Form\ProductType;
use App\Repository\ProductRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;

#[Route('/product')]
class ProductController extends AbstractController
{
    #[Route('/', name: 'app_product_index', methods: ['GET'])]
    public function index(ProductRepository $productRepository): Response
    {
        return $this->render('product/index.html.twig', [
            'products' => $productRepository->findAll(),
        ]);
    }

    #[Route('/new', name: 'app_product_new', methods: ['GET', 'POST'])]
    public function new(Request $request, EntityManagerInterface $entityManager): Response
    {
        $product = new Product();
        $form = $this->createForm(ProductType::class, $product);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $entityManager->persist($product);
            $entityManager->flush();

            return $this->redirectToRoute('app_product_index', [], Response::HTTP_SEE_OTHER);
        }

        return $this->render('product/new.html.twig', [
            'product' => $product,
            'form' => $form,
        ]);
    }

    #[Route('/{id}', name: 'app_product_show', methods: ['GET'])]
    public function show(Product $product): Response
    {
        return $this->render('product/show.html.twig', [
            'product' => $product,
        ]);
    }

    #[Route('/{id}/edit', name: 'app_product_edit', methods: ['GET', 'POST'])]
    public function edit(Request $request, Product $product, EntityManagerInterface $entityManager): Response
    {
        $form = $this->createForm(ProductType::class, $product);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $entityManager->flush();

            return $this->redirectToRoute('app_product_index', [], Response::HTTP_SEE_OTHER);
        }

        return $this->render('product/edit.html.twig', [
            'product' => $product,
            'form' => $form,
        ]);
    }

    #[Route('/{id}', name: 'app_product_delete', methods: ['POST'])]
    public function delete(Request $request, Product $product, EntityManagerInterface $entityManager): Response
    {
        if ($this->isCsrfTokenValid('delete'.$product->getId(), $request->getPayload()->get('_token'))) {
            $entityManager->remove($product);
            $entityManager->flush();
        }

        return $this->redirectToRoute('app_product_index', [], Response::HTTP_SEE_OTHER);
    }
}




go VSC: config/packages/security.yaml

modify to 

access_control:
    - { path: ^/product, roles: ROLE_ADMIN } # /product/*
    - { path: ^/user, roles: ROLE_USER }

to show / add Logout:
go browser: twig is granted symfony

symfony.com/doc/current/reference/twig_refereence.html


Update (adapted) route (the page which will be shown) of the different roles:
we are doing this for is_granted

go src/Security/LoginFormAuthenticator.php:
after line "use TargetPatTrait;"

write (to create a property)

private $security;
and add 
Security $security

new code:
use TargetPatTrait;
private $security;
public const LOGIN_ROUTE = 'app_login';
public function __construct(private UrlGeneratorInterface $urlGenerator, Security $security)
{
    $this->security = $security;
}

add at line 51 /LiveCoding-Code symfony Day6, after onAuthenticationSuccess after the first if } command
add following code:
if($this->security->isGranted("ROLE_ADMIN")){
    return new RedirectResponse($this->urlGenerator->generate('app_product_index'));
}else {
    return new RedirectResponse($this->urlGenerator->generate('app_user_index'));

}
}

the code-line "    return new RedirectResponse($this->urlGenerator->generate('app_product_index));" "Strg" + "x" from the code-lines below

at the else-statement we take - user / product from security -  and - ROLE_ADMIN - access_control paragraph too.

go VSC: templates/components/navbar.html.twig




go VSC: src/templates/components/navbar.thml.twig
we add if /else

{% if is_granted('IS_AUTHENTICATED_FULLY') %}
<li class="nav-item">
<a class="nav-link" href="{{  path('app_logout') }}">Logout</a>
</li>
{%  else %}
<li class="nav-item">
<a class="nav-link" href="{{  path('app_login') }}">Login</a>
</li>
<li class="nav-item">
<a class="nav-link" href="{{  path('app_register') }}">Register</a>
</li>
{% endif %}


go to phpMyAdmin
click table user, click on field "roles" at the "Admin" and write there
"
["ROLE_ADMIN"]

add at user-view, when user is login, list of all products - Home -:
go to src/Controller/UserAccessController.php

user_access/index.html.twig
'controller_name' => 'UserAccessController

go VSC: src/Controller/UserAccessController.php

<?php

namespace App\Controller;

use App\Repository\ProductRepository;
...
...
...
...

#[Route('\user')]
class UserAccessController extends AbstractController
{
    #[Route('/', name: 'app_user_access')]
    public function index(ProductRepository $productRepository): Response
    {
        return $this->render('user_access/index.html.twig', [
            'products' => $productRepository->findAll(),
        ]);
    }
} 

go VSC: templates/user_access/index.html.twig
write or copy it from home:

{%  extends 'base.html.twig' %}

{% block title %}User{%  endblock %}

{%  block body %}
    <h1>Product List</h1>

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
        {%  for product in products %}
                <tr>
                    <td>{{ product.name }}</td>
                    <td>{{ product.price }}</td>
                </tr>
            {% else %}
                <tr>
                    <td colspan="4">no records found</td>
                </tr>
        {% endfor %}
        </tbody>
    </table>
{% endblock %}    
    
    
    </table>


